

Commit: Change the (build-word) function to only include the
        stopping-point arities in its list of predicates.

Commit: Add a (compose-binary) function that returns all possible
        compositions of two words, given that each represents a
        whole family of predicates.
        
Commit: Add a (compose) function that folds (compose-binary) over
        a list of words.  Add tests for same.


Idea:
-----
Re-conceive of predicates as being actual FUNCTIONS.  So:

    *dua* = (lambda (a b) `(dua ,a ,b))
    *mai* = (lambda (a b) `(mai ,a ,b))
    *leo* = (lambda (a b) `(leo ,a ,b))
    *dua mai* = (lambda (a b c) (dua a (mai b c)))
    *leo mai* = (lambda (a b) (leo a (mai jado b)))

A fully-fledged predicate would also need to carry around
its typelist, so in truth we would have:

    *dua* = ( '(c 0) . (lambda (a b) `(dua ,a ,b)) )

And since "each...word is really a family of...predicates":

    *jeo* = ( ( '(0)   . (lambda (a) `(jeo ,a)) )
              ( '(c 1) . (lambda (a b) `(jao ,a ,b))) )